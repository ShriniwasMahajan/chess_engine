#include "board.h"
#include "pieces.h"
#include "ai.h"
#include "game.h"
using namespace sf;

int board[8][8] = {
    -1, -2, -3, -4, -5, -3, -2, -1,
    -6, -6, -6, -6, -6, -6, -6, -6,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    6, 6, 6, 6, 6, 6, 6, 6,
    1, 2, 3, 4, 5, 3, 2, 1};

int pieceVals[32] = {-500, -320, -330, -900, -20000, -330, -320, -500,
                     -100, -100, -100, -100, -100, -100, -100, -100,
                     100, 100, 100, 100, 100, 100, 100, 100,
                     500, 320, 330, 900, 20000, 330, 320, 500};

int bRookPos[64] = {0, 0, 0, 10, 10, 0, 0, 0,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    5, 10, 10, 10, 10, 10, 10, 5,
                    0, 0, 0, 0, 0, 0, 0, 0};

int bKnightPos[64] = {-50, -40, -30, -30, -30, -30, -40, -50,
                      -40, -20, 0, 5, 5, 0, -20, -40,
                      -30, 5, 10, 15, 15, 10, 5, -30,
                      -30, 0, 15, 20, 20, 15, 0, -30,
                      -30, 5, 15, 20, 20, 15, 5, -30,
                      -30, 0, 10, 15, 15, 10, 0, -30,
                      -40, -20, 0, 0, 0, 0, -20, -40,
                      -50, -40, -30, -30, -30, -30, -40, -50};

int bBishopPos[64] = {-20, -10, -10, -10, -10, -10, -10, -20,
                      -10, 5, 0, 0, 0, 0, 5, -10,
                      -10, 10, 10, 10, 10, 10, 10, -10,
                      -10, 0, 10, 10, 10, 10, 0, -10,
                      -10, 5, 5, 10, 10, 5, 5, -10,
                      -10, 0, 5, 10, 10, 5, 0, -10,
                      -10, 0, 0, 0, 0, 0, 0, -10,
                      -20, -10, -10, -10, -10, -10, -10, -20};

int bQueenPos[64] = {-20, -10, -10, -5, -5, -10, -10, -20,
                     -10, 0, 5, 0, 0, 0, 0, -10,
                     -10, 5, 5, 5, 5, 5, 0, -10,
                     0, 0, 5, 5, 5, 5, 0, -5,
                     -5, 0, 5, 5, 5, 5, 0, -5,
                     -10, 0, 5, 5, 5, 5, 0, -10,
                     -10, 0, 0, 0, 0, 0, 0, -10,
                     -20, -10, -10, -5, -5, -10, -10, -20};

int bKingPos[64] = {20, 30, 10, 0, 0, 10, 30, 20,
                    20, 20, 0, 0, 0, 0, 20, 20,
                    -10, -20, -20, -20, -20, -20, -20, -10,
                    -20, -30, -30, -40, -40, -30, -30, -20,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30};

int bKingEndGame[64] = {-50, -30, -30, -30, -30, -30, -30, -50,
                        -30, -30, 0, 0, 0, 0, -30, -30,
                        -30, -10, 20, 30, 30, 20, -10, -30,
                        -30, -10, 30, 40, 40, 30, -10, -30,
                        -30, -10, 30, 40, 40, 30, -10, -30,
                        -30, -10, 20, 30, 30, 20, -10, -30,
                        -30, -20, -10, 0, 0, -10, -20, -30,
                        -50, -40, -30, -20, -20, -30, -40, -50};

int bPawnPos[64] = {0, 0, 0, 0, 0, 0, 0, 0,
                    5, 10, 10, -20, -20, 10, 10, 5,
                    5, -5, -10, 0, 0, -10, -5, 5,
                    0, 0, 0, 20, 20, 0, 0, 0,
                    5, 5, 10, 25, 25, 10, 5, 5,
                    10, 10, 20, 30, 30, 20, 10, 10,
                    50, 50, 50, 50, 50, 50, 50, 50,
                    0, 0, 0, 0, 0, 0, 0, 0};

int size = 56;
Vector2f offset(28, 28);

std::string toChessNote(Vector2f p)
{
    std::string s = "";
    s += p.x / size + 97;
    s += 7 - p.y / size + 49;
    return s;
}

Vector2f toCord(char a, char b)
{
    int x = (int)a - 97;
    int y = 7 - (int)b + 49;
    return Vector2f(x * size, y * size);
}

bool isValid(Vector2f pos)
{
    return std::min(pos.x, pos.y) >= 0.0f && std::max(pos.x, pos.y) < 8.0f * size;
}

void loadPosition()
{
    int k = 0;
    for (int i = 0; i < 8; i++)
        for (int j = 0; j < 8; j++)
        {
            if (!board[i][j])
                continue;
            int place = abs(board[i][j]) - 1;
            int sign = board[i][j] > 0;
            f[k].setTextureRect(IntRect(size * place, size * sign, size, size));
            f[k].setPosition(size * j, size * i);
            k++;
        }
}

void restart()
{
    position = "";
    turns = 1;
    defeated.clear();

    for (int i = 0; i < 16; i++)
        f[i].setPosition(size * (i % 8), size * (i / 8));
    for (int i = 16; i < 32; i++)
        f[i].setPosition(size * (i % 8), size * (4 + (i / 8)));
}